// Code generated by protoc-gen-gogo.
// source: nats_msg.proto
// DO NOT EDIT!

/*
	Package protocol is a generated protocol buffer package.

	It is generated from these files:
		nats_msg.proto

	It has these top-level messages:
		HnObjectRequest
		HnPost
		HnUser
		ObjectModified
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HnObjectRequestObjectType int32

const (
	HnObjectRequest_POST HnObjectRequestObjectType = 0
	HnObjectRequest_USER HnObjectRequestObjectType = 1
)

var HnObjectRequestObjectType_name = map[int32]string{
	0: "POST",
	1: "USER",
}
var HnObjectRequestObjectType_value = map[string]int32{
	"POST": 0,
	"USER": 1,
}

func (x HnObjectRequestObjectType) String() string {
	return proto.EnumName(HnObjectRequestObjectType_name, int32(x))
}
func (HnObjectRequestObjectType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorNatsMsg, []int{0, 0}
}

type HnObjectRequest struct {
	Id       int64                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username string                    `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Type     HnObjectRequestObjectType `protobuf:"varint,3,opt,name=type,proto3,enum=protocol.HnObjectRequestObjectType" json:"type,omitempty"`
}

func (m *HnObjectRequest) Reset()                    { *m = HnObjectRequest{} }
func (m *HnObjectRequest) String() string            { return proto.CompactTextString(m) }
func (*HnObjectRequest) ProtoMessage()               {}
func (*HnObjectRequest) Descriptor() ([]byte, []int) { return fileDescriptorNatsMsg, []int{0} }

func (m *HnObjectRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HnObjectRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *HnObjectRequest) GetType() HnObjectRequestObjectType {
	if m != nil {
		return m.Type
	}
	return HnObjectRequest_POST
}

type HnPost struct {
	Id          int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Deleted     bool    `protobuf:"varint,2,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Type        string  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Author      string  `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	Time        int32   `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
	Dead        bool    `protobuf:"varint,6,opt,name=dead,proto3" json:"dead,omitempty"`
	Parent      int64   `protobuf:"varint,7,opt,name=parent,proto3" json:"parent,omitempty"`
	Kids        []int64 `protobuf:"varint,8,rep,packed,name=kids" json:"kids,omitempty"`
	Url         string  `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	Title       string  `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
	Parts       []int64 `protobuf:"varint,11,rep,packed,name=parts" json:"parts,omitempty"`
	Descendants int64   `protobuf:"varint,12,opt,name=descendants,proto3" json:"descendants,omitempty"`
	Text        string  `protobuf:"bytes,13,opt,name=text,proto3" json:"text,omitempty"`
	Source      int32   `protobuf:"varint,14,opt,name=source,proto3" json:"source,omitempty"`
	Score       int64   `protobuf:"varint,15,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *HnPost) Reset()                    { *m = HnPost{} }
func (m *HnPost) String() string            { return proto.CompactTextString(m) }
func (*HnPost) ProtoMessage()               {}
func (*HnPost) Descriptor() ([]byte, []int) { return fileDescriptorNatsMsg, []int{1} }

func (m *HnPost) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HnPost) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *HnPost) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *HnPost) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *HnPost) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *HnPost) GetDead() bool {
	if m != nil {
		return m.Dead
	}
	return false
}

func (m *HnPost) GetParent() int64 {
	if m != nil {
		return m.Parent
	}
	return 0
}

func (m *HnPost) GetKids() []int64 {
	if m != nil {
		return m.Kids
	}
	return nil
}

func (m *HnPost) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *HnPost) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *HnPost) GetParts() []int64 {
	if m != nil {
		return m.Parts
	}
	return nil
}

func (m *HnPost) GetDescendants() int64 {
	if m != nil {
		return m.Descendants
	}
	return 0
}

func (m *HnPost) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *HnPost) GetSource() int32 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *HnPost) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

type HnUser struct {
	Id        string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Delay     int32   `protobuf:"varint,2,opt,name=delay,proto3" json:"delay,omitempty"`
	Created   int32   `protobuf:"varint,3,opt,name=created,proto3" json:"created,omitempty"`
	Karma     int64   `protobuf:"varint,4,opt,name=karma,proto3" json:"karma,omitempty"`
	About     string  `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
	Submitted []int64 `protobuf:"varint,6,rep,packed,name=submitted" json:"submitted,omitempty"`
}

func (m *HnUser) Reset()                    { *m = HnUser{} }
func (m *HnUser) String() string            { return proto.CompactTextString(m) }
func (*HnUser) ProtoMessage()               {}
func (*HnUser) Descriptor() ([]byte, []int) { return fileDescriptorNatsMsg, []int{2} }

func (m *HnUser) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *HnUser) GetDelay() int32 {
	if m != nil {
		return m.Delay
	}
	return 0
}

func (m *HnUser) GetCreated() int32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *HnUser) GetKarma() int64 {
	if m != nil {
		return m.Karma
	}
	return 0
}

func (m *HnUser) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *HnUser) GetSubmitted() []int64 {
	if m != nil {
		return m.Submitted
	}
	return nil
}

type ObjectModified struct {
	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MysqlFile string `protobuf:"bytes,2,opt,name=mysql_file,json=mysqlFile,proto3" json:"mysql_file,omitempty"`
	MysqlPos  uint32 `protobuf:"varint,3,opt,name=mysql_pos,json=mysqlPos,proto3" json:"mysql_pos,omitempty"`
}

func (m *ObjectModified) Reset()                    { *m = ObjectModified{} }
func (m *ObjectModified) String() string            { return proto.CompactTextString(m) }
func (*ObjectModified) ProtoMessage()               {}
func (*ObjectModified) Descriptor() ([]byte, []int) { return fileDescriptorNatsMsg, []int{3} }

func (m *ObjectModified) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ObjectModified) GetMysqlFile() string {
	if m != nil {
		return m.MysqlFile
	}
	return ""
}

func (m *ObjectModified) GetMysqlPos() uint32 {
	if m != nil {
		return m.MysqlPos
	}
	return 0
}

func init() {
	proto.RegisterType((*HnObjectRequest)(nil), "protocol.hn_object_request")
	proto.RegisterType((*HnPost)(nil), "protocol.hn_post")
	proto.RegisterType((*HnUser)(nil), "protocol.hn_user")
	proto.RegisterType((*ObjectModified)(nil), "protocol.object_modified")
	proto.RegisterEnum("protocol.HnObjectRequestObjectType", HnObjectRequestObjectType_name, HnObjectRequestObjectType_value)
}
func (m *HnObjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HnObjectRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(m.Id))
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *HnPost) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HnPost) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(m.Id))
	}
	if m.Deleted {
		dAtA[i] = 0x10
		i++
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Author) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(len(m.Author)))
		i += copy(dAtA[i:], m.Author)
	}
	if m.Time != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(m.Time))
	}
	if m.Dead {
		dAtA[i] = 0x30
		i++
		if m.Dead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Parent != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(m.Parent))
	}
	if len(m.Kids) > 0 {
		dAtA2 := make([]byte, len(m.Kids)*10)
		var j1 int
		for _, num1 := range m.Kids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Parts) > 0 {
		dAtA4 := make([]byte, len(m.Parts)*10)
		var j3 int
		for _, num1 := range m.Parts {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x5a
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.Descendants != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(m.Descendants))
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if m.Source != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(m.Source))
	}
	if m.Score != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(m.Score))
	}
	return i, nil
}

func (m *HnUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HnUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Delay != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(m.Delay))
	}
	if m.Created != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(m.Created))
	}
	if m.Karma != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(m.Karma))
	}
	if len(m.About) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(len(m.About)))
		i += copy(dAtA[i:], m.About)
	}
	if len(m.Submitted) > 0 {
		dAtA6 := make([]byte, len(m.Submitted)*10)
		var j5 int
		for _, num1 := range m.Submitted {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	return i, nil
}

func (m *ObjectModified) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectModified) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(m.Id))
	}
	if len(m.MysqlFile) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(len(m.MysqlFile)))
		i += copy(dAtA[i:], m.MysqlFile)
	}
	if m.MysqlPos != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintNatsMsg(dAtA, i, uint64(m.MysqlPos))
	}
	return i, nil
}

func encodeFixed64NatsMsg(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32NatsMsg(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintNatsMsg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HnObjectRequest) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovNatsMsg(uint64(m.Id))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovNatsMsg(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovNatsMsg(uint64(m.Type))
	}
	return n
}

func (m *HnPost) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovNatsMsg(uint64(m.Id))
	}
	if m.Deleted {
		n += 2
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovNatsMsg(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovNatsMsg(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovNatsMsg(uint64(m.Time))
	}
	if m.Dead {
		n += 2
	}
	if m.Parent != 0 {
		n += 1 + sovNatsMsg(uint64(m.Parent))
	}
	if len(m.Kids) > 0 {
		l = 0
		for _, e := range m.Kids {
			l += sovNatsMsg(uint64(e))
		}
		n += 1 + sovNatsMsg(uint64(l)) + l
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovNatsMsg(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovNatsMsg(uint64(l))
	}
	if len(m.Parts) > 0 {
		l = 0
		for _, e := range m.Parts {
			l += sovNatsMsg(uint64(e))
		}
		n += 1 + sovNatsMsg(uint64(l)) + l
	}
	if m.Descendants != 0 {
		n += 1 + sovNatsMsg(uint64(m.Descendants))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovNatsMsg(uint64(l))
	}
	if m.Source != 0 {
		n += 1 + sovNatsMsg(uint64(m.Source))
	}
	if m.Score != 0 {
		n += 1 + sovNatsMsg(uint64(m.Score))
	}
	return n
}

func (m *HnUser) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNatsMsg(uint64(l))
	}
	if m.Delay != 0 {
		n += 1 + sovNatsMsg(uint64(m.Delay))
	}
	if m.Created != 0 {
		n += 1 + sovNatsMsg(uint64(m.Created))
	}
	if m.Karma != 0 {
		n += 1 + sovNatsMsg(uint64(m.Karma))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovNatsMsg(uint64(l))
	}
	if len(m.Submitted) > 0 {
		l = 0
		for _, e := range m.Submitted {
			l += sovNatsMsg(uint64(e))
		}
		n += 1 + sovNatsMsg(uint64(l)) + l
	}
	return n
}

func (m *ObjectModified) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovNatsMsg(uint64(m.Id))
	}
	l = len(m.MysqlFile)
	if l > 0 {
		n += 1 + l + sovNatsMsg(uint64(l))
	}
	if m.MysqlPos != 0 {
		n += 1 + sovNatsMsg(uint64(m.MysqlPos))
	}
	return n
}

func sovNatsMsg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNatsMsg(x uint64) (n int) {
	return sovNatsMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HnObjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNatsMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: hn_object_request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: hn_object_request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNatsMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (HnObjectRequestObjectType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNatsMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNatsMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HnPost) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNatsMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: hn_post: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: hn_post: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNatsMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNatsMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dead = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			m.Parent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Parent |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNatsMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Kids = append(m.Kids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNatsMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNatsMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNatsMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Kids = append(m.Kids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Kids", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNatsMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNatsMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNatsMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Parts = append(m.Parts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNatsMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNatsMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNatsMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Parts = append(m.Parts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Parts", wireType)
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Descendants", wireType)
			}
			m.Descendants = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Descendants |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNatsMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNatsMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNatsMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HnUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNatsMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: hn_user: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: hn_user: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNatsMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delay", wireType)
			}
			m.Delay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delay |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Karma", wireType)
			}
			m.Karma = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Karma |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNatsMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNatsMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Submitted = append(m.Submitted, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNatsMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthNatsMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNatsMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Submitted = append(m.Submitted, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitted", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNatsMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNatsMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectModified) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNatsMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: object_modified: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: object_modified: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MysqlFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNatsMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MysqlFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MysqlPos", wireType)
			}
			m.MysqlPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MysqlPos |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNatsMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNatsMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNatsMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNatsMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNatsMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNatsMsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNatsMsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNatsMsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNatsMsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNatsMsg   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("nats_msg.proto", fileDescriptorNatsMsg) }

var fileDescriptorNatsMsg = []byte{
	// 477 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xbf, 0x8e, 0x13, 0x31,
	0x10, 0xc6, 0xcf, 0xd9, 0xfc, 0xd9, 0x9d, 0x70, 0xb9, 0x60, 0x9d, 0x90, 0xc5, 0x9f, 0x68, 0x49,
	0x43, 0xaa, 0x14, 0x50, 0xd2, 0x21, 0x41, 0xcb, 0xc9, 0x07, 0x25, 0x8a, 0x9c, 0xf5, 0x1c, 0x31,
	0xb7, 0xbb, 0xce, 0xd9, 0x5e, 0xe9, 0xf2, 0x1c, 0x34, 0x74, 0xbc, 0x0e, 0x25, 0x0d, 0x3d, 0x0a,
	0x2f, 0x82, 0x3c, 0xbb, 0x81, 0x48, 0x77, 0xd5, 0xce, 0xef, 0x93, 0x3d, 0xf3, 0xf9, 0xdb, 0x81,
	0x49, 0xad, 0x82, 0x5f, 0x55, 0xfe, 0xf3, 0x72, 0xeb, 0x6c, 0xb0, 0x3c, 0xa5, 0x4f, 0x61, 0xcb,
	0xf9, 0x77, 0x06, 0x0f, 0x37, 0xf5, 0xca, 0xae, 0xbf, 0x60, 0x11, 0x56, 0x0e, 0x6f, 0x1a, 0xf4,
	0x81, 0x4f, 0xa0, 0x67, 0xb4, 0x60, 0x39, 0x5b, 0x24, 0xb2, 0x67, 0x34, 0x7f, 0x0c, 0x69, 0xe3,
	0xd1, 0xd5, 0xaa, 0x42, 0xd1, 0xcb, 0xd9, 0x22, 0x93, 0xff, 0x98, 0xbf, 0x86, 0x7e, 0xd8, 0x6d,
	0x51, 0x24, 0x39, 0x5b, 0x4c, 0x5e, 0xbe, 0x58, 0x1e, 0x5a, 0x2f, 0xef, 0xb4, 0x5d, 0x76, 0x18,
	0x8f, 0x4b, 0xba, 0x34, 0x7f, 0x0e, 0xe3, 0x23, 0x91, 0xa7, 0xd0, 0xbf, 0x78, 0x7f, 0xf9, 0x61,
	0x7a, 0x12, 0xab, 0x8f, 0x97, 0x6f, 0xe5, 0x94, 0xcd, 0x7f, 0xf5, 0x60, 0xb4, 0xa9, 0x57, 0x5b,
	0x7b, 0x8f, 0x2f, 0x01, 0x23, 0x8d, 0x25, 0x06, 0xd4, 0x64, 0x2b, 0x95, 0x07, 0xe4, 0xfc, 0xc8,
	0x55, 0xd6, 0x0e, 0xe3, 0x8f, 0x60, 0xa8, 0x9a, 0xb0, 0xb1, 0x4e, 0xf4, 0x49, 0xed, 0x88, 0xce,
	0x9a, 0x0a, 0xc5, 0x20, 0x67, 0x8b, 0x81, 0xa4, 0x3a, 0x6a, 0x1a, 0x95, 0x16, 0x43, 0x6a, 0x4b,
	0x75, 0xbc, 0xbf, 0x55, 0x0e, 0xeb, 0x20, 0x46, 0xe4, 0xa0, 0xa3, 0x78, 0xf6, 0xda, 0x68, 0x2f,
	0xd2, 0x3c, 0x59, 0x24, 0x92, 0x6a, 0x3e, 0x85, 0xa4, 0x71, 0xa5, 0xc8, 0x68, 0x50, 0x2c, 0xf9,
	0x39, 0x0c, 0x82, 0x09, 0x25, 0x0a, 0x20, 0xad, 0x85, 0xa8, 0x6e, 0x95, 0x0b, 0x5e, 0x8c, 0xe9,
	0x72, 0x0b, 0x3c, 0x87, 0xb1, 0x46, 0x5f, 0x60, 0xad, 0x55, 0x1d, 0xbc, 0x78, 0x40, 0xe3, 0x8e,
	0x25, 0xf2, 0x8c, 0xb7, 0x41, 0x9c, 0x76, 0xef, 0xc3, 0xdb, 0x10, 0xfd, 0x79, 0xdb, 0xb8, 0x02,
	0xc5, 0x84, 0x5e, 0xd2, 0x51, 0x9c, 0xe1, 0x0b, 0xeb, 0x50, 0x9c, 0x51, 0x9f, 0x16, 0xe6, 0x5f,
	0x19, 0xe5, 0x1a, 0xff, 0xe3, 0x51, 0xae, 0x19, 0xe5, 0x7a, 0x0e, 0x03, 0x8d, 0xa5, 0xda, 0x51,
	0xaa, 0x03, 0xd9, 0x42, 0x4c, 0xbb, 0x70, 0xa8, 0x62, 0xda, 0x09, 0xe9, 0x07, 0x8c, 0xe7, 0xaf,
	0x95, 0xab, 0x14, 0x05, 0x9b, 0xc8, 0x16, 0xa2, 0xaa, 0xd6, 0xb6, 0x09, 0x14, 0x6c, 0x26, 0x5b,
	0xe0, 0x4f, 0x21, 0xf3, 0xcd, 0xba, 0x32, 0x21, 0xf6, 0x19, 0xd2, 0xab, 0xff, 0x0b, 0xf3, 0x4f,
	0x70, 0xd6, 0x2d, 0x44, 0x65, 0xb5, 0xb9, 0x32, 0xa8, 0xef, 0xfc, 0xf4, 0x67, 0x00, 0xd5, 0xce,
	0xdf, 0x94, 0xab, 0x2b, 0x53, 0x1e, 0xd6, 0x31, 0x23, 0xe5, 0x9d, 0x29, 0x91, 0x3f, 0x81, 0x16,
	0xe2, 0xc6, 0x90, 0xcf, 0x53, 0x99, 0x92, 0x70, 0x61, 0xfd, 0x9b, 0xe9, 0x8f, 0xfd, 0x8c, 0xfd,
	0xdc, 0xcf, 0xd8, 0xef, 0xfd, 0x8c, 0x7d, 0xfb, 0x33, 0x3b, 0x59, 0x0f, 0x69, 0x5f, 0x5f, 0xfd,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x1b, 0xe8, 0xa1, 0x23, 0x03, 0x00, 0x00,
}
